/**************************************************************************************************
**
**
** TODO: License
**
** Author: Marek Santa
**************************************************************************************************/

#ifndef SPECT_LIB_KEY_MEMORY_H_
#define SPECT_LIB_KEY_MEMORY_H_

#include <vector>
#include <iostream>

class spect::KeyMemory
{
    public:

        ///////////////////////////////////////////////////////////////////////////////////////////
        /// @brief New Key Memory constructor
        /// @returns New model object
        ///////////////////////////////////////////////////////////////////////////////////////////
        KeyMemory();

        ///////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Key Memory destructor
        ///////////////////////////////////////////////////////////////////////////////////////////
        ~KeyMemory();

        ///////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Get Key Memory
        /// @param type Key type
        /// @param slot Slot in memory
        /// @param offset Offset within the slot
        /// @returns Read data.
        ///////////////////////////////////////////////////////////////////////////////////////////
        uint32_t Get(uint8_t type, uint8_t slot, uint8_t offset);

        ///////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Set Key Memory
        /// @param type Key type
        /// @param slot Slot in memory
        /// @param offset Offset within the slot
        /// @param data Data to be written
        ///////////////////////////////////////////////////////////////////////////////////////////
        void Set(uint8_t type, uint8_t slot, uint8_t offset, uint32_t data);

        ///////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Read Key Memory
        /// @param type Key type
        /// @param slot Slot in memory
        /// @param offset Offset within the slot
        /// @returns Read data.
        ///////////////////////////////////////////////////////////////////////////////////////////
        uint32_t Read(uint32_t type, uint32_t slot, uint32_t offset);

        ///////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Write Key Memory
        /// @param type Key type
        /// @param slot Slot in memory
        /// @param offset Offset within the slot
        /// @param data Data to be written
        ///////////////////////////////////////////////////////////////////////////////////////////
        void Write(uint32_t type, uint32_t slot, uint32_t offset, uint32_t data);

        ///////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Erase Key Memory
        /// @param type Key type
        /// @param slot Slot in memory
        ///////////////////////////////////////////////////////////////////////////////////////////
        void Erase(uint32_t type, uint32_t slot);

        ///////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Dump Key Memory
        /// @param path File where to dump memory content
        ///////////////////////////////////////////////////////////////////////////////////////////
        void Dump(const std::string &path);

        ///////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Load Key Memory
        /// @param path File from where to load memory content
        ///////////////////////////////////////////////////////////////////////////////////////////
        void Load(const std::string &path);

    private:

        // Key memory
        uint32_t key_mem_[KEY_MEM_TYPE_NUM][KEY_MEM_SLOT_NUM][KEY_MEM_OFFSET_NUM];

};

#endif
